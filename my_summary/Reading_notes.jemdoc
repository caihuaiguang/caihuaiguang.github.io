# jemdoc: menu{MENU}{Reading_notes.html},nofooter
== 读书笔记

== 数据挖掘竞赛参考
- [https://zhuanlan.zhihu.com/p/149769029 数据科学竞赛：你从未见过的究极进化秘笈]
- [https://www.cnblogs.com/chenzibai/p/16306019.html 基于LSTM与迁移学习的光伏发电功率预测数字孪生模型]

== 《计算机存储与外设》，Alan Clements
介绍计算机中的存储器、总线、输入和输出接口、指令系统。
=== cache
- 为什么要有cache：存储器的容量提升很快、CPU处理数据的速度提升很快，但是 存储器提供数据的速度 跟不上 CPU处理数据的速度。

=== 接口与通讯
- 解释通过中断实现I/O控制和数据传输
=== 总线
- 在系统的不同功能模块之间传递信息
- 最流行的高性能总线之一——个人电脑上的PCI总线

=== 多处理器
- 理解如何在单个芯片上集成多个处理器以提升性能
- GPU如何实现加速

=== 术语
- VLSI（Very Large Scale Integration，超大规模集成电路）


== 《剑指offer》

=== 函数递归和栈用哪个？

   以面试题6为例，现在有链表的头节点，要反向打印链表。

   递归和栈是一样的过程，但是当链表很长，函数调用的层级就会很深，导致*函数调用栈*溢出。递归*有时间和空间上的损耗*，时间上：在内存栈中分配空间来保存参数、返回地址、临时变量；并且数据压入和弹出都有时间损耗，效率上肯定不如循环。递归可能*存在重复计算*。

=== 二叉树

   将二叉树镜像：从父节点开始，交换左右子树，再对左右子树递归调用

   判断二叉树是否对称：判断前序遍历和*对称前序遍历*（先父，再右子树，再左子树）是否输出一致；注意要考虑遍历时遇到的NULL（当树的所有元素都一样时，只看元素值是没办法的）
   
   分行打印二叉树：我之前的做法是两个队列，一个只存储目前层的节点，一个存储目前层节点遍历后的子节点；相当于分解了一下层序遍历，当目前层节点为空说明要换行了，换行的时候就将另一个队列（此时已从左到右记录所有目前层的子节点）赋值给目前层队列。
   
   这里给出的做法不需要两个队列，而是用两个数字：一个变量表示目前层还未打印的节点数，另一个表示下一层的节点数。
   
   求树两个节点的最低公共父节点：二叉搜索树可以用数值关系来找；多叉树或者无指向父节点的指针的情况可以将从根节点到节点的路径看作是链表，这样转换为求2个链表的交点（公共取值）
   
=== 获取栈的最小值：我们希望能够以O(1)的复杂度获得一个栈的最小值，此操作定义为min。并且push,pop操作复杂度仍为O(1)

   一种常见的想法是记下栈的最小值，但当栈发生push,pop时，就不能确定此时栈中的最小值。另一种想法是排序，但是复杂度又上去了。

   这里引入辅助栈，辅助栈的某个位置的值就是栈中对应位置及其下所有元素的最小值。为此修改push操作：当push a到栈中，将a和辅助栈顶元素b相比，a<b小于则push a，否则b；这样辅助栈的元素数量和栈中保持一样。pop不需要改。

=== 给出栈的压入顺序，判断某个顺序是否为弹出顺序

   算法：建一个辅助栈，根据给定的需要判断的弹出顺序，结合给定的压栈顺序进行操作：若下一个弹出的数字是辅助栈栈顶，就弹出；否则就把压栈序列中的数字压入直到要弹出的数字处于栈顶；如果所有数字都压入辅助栈但没找到下一个弹出数字，则次顺序不是弹出顺序。

=== 连续子数组的最大值，最长不含重复字符的子字符串可以用动态规划解

=== C++中成员变量的初始化顺序只与它们在类中的申明有关，和初始化列表中的顺序无关


== 《计算理论》

内容来自于Michael Sipser的《Introduction to the Theory of Computation》

计算理论三个传统的核心领域：自动机，可计算性，复杂性；

=== 自动机模型：

- 有穷自动机模型，用于描述能力和资源都极其有限的计算机的模型。现实中用于文本处理，编译程序，硬件设计。
  自动门，电梯控制器等都可以用有穷自动机描述（将仪器的工作过程看作是动作引起状态之间的转换，和马尔科夫链很相似）。  
  NFA和DFA识别相同的语言类，这被称为NFA，DFA的等价性；并且与正则表达式等价

- 上下文无关文法模型，用在程序设计语言和人工智能。
 下推自动机（pushdown automata）在有穷自动机的组成上加了“栈”，使其能描述具有无限存储的设备；在能力上与上下文无关文法等价。

=== 可计算性理论：

- 图灵机是一种比自动机，下推自动机能力更强的模型：无限存储，且不必像下推自动机受“后进先出”的栈的限制，可以任意访问内部数据。他能模拟实际计算机的所有计算行为。
 图灵机也可以形式化定义为7元组。

- 丘奇-图灵论题：丘奇使用λ演算的记号系统来定义算法，而图灵用图灵机做相同的事情，这两个定义被证明是等价的；即*算法的直观概念等价于图灵机算法*。

- 可判定性：有些问题是算法上不可解，即找不到一个图灵机算法；看一个问题可不可解还有一种方法——归约为另一个问题。

- 递归定理：试想一下，汽车生产线比汽车复杂，因此似乎有结论，一个机器不可能制造比自身复杂的机器，但这是有可能的。

=== 复杂性理论：

- 时间复杂性：NP，P问题；
   -- P：可以多项式时间求解，对应确定性图灵机上多项式时间运行；
   -- NP：可以多项式时间验证，对应非确定性图灵机上多项式时间运行；
- 空间复杂性
- 难解性：表示虽然某些问题理论上可解，但是时间或空间的消耗非多项式；所有NP问题都是难解的；当最优化问题是NP难解问题时，不存在找到最优解的多项式算法，除非P=NP。这时候，我们可以转为求解最优解的近似解。

== 《如何高效学习》

- 整体性学习：消除学科之间界限，将知识视为整体；在学习知识时，不必“拷贝”，而是创造信息网络，将知识关联起来。

- 记忆知识的方法：
   -- 结构：知识之间存在结构
   -- 模型：将单个知识点和模型对应起来，模型可以是图，概念，过程；关键在于压缩知识。
   -- 知识的拓展：横向：定位知识，考虑其在知识网络中的位置；纵向：知识的背景和前景。
   -- 内化：听完课后，用白纸写出主要观点，再针对观点写出其相联系的观点，概念，公式。

== 《社会媒体挖掘》

Reza Zafarani

- 二分图最大匹配可以通过讲两边的点分别都连到一个点然后用网络最大流来做。
- 网络的每个节点有中心性：可以衡量这个点重不重要，在不在中心
  -- 点的特征的角度：katz中心性，PageRank
  -- 节点连接其它节点表现的重要性：比如计算这个点被网络中其他两个点的最短路径通过的次数，到达其他点的最短路径的平均值等
  -- 还可以将点的中心性拓展到群体的中心性
- 聚类系数刻画了节点之间的传递性
- 要区分影响力和同质性——影响力是影响另一个人变得相似”好友变相似“，同质性使原本就相似”相似变好友“，这两种东西都会使得节点之间有链接

== 《云计算》

SOCC云计算顶会

HPDC、SC、ISC高性能顶会

成本优化 
  - 调整服务类型；存储资源选型（根据访问频率分为热数据、温数据、冷数据（可以用磁带、磁盘存储，费用低））
  - 增加系统弹性（auto scaling，自动化扩容）
  - spot实例

联邦学习
- 本地传训练的模型参数到云上，数据不出本地，云将得到的模型参数平均一下返回（这儿用到了数据在多台机器上用不同数据训练模型得到的权重平均后和在一台机器所有数据训练得到的权重是一样的）

拍卖为何是计算机问题而非经济学？ 
  - 因为可以看作是约束下max平均满意度，但拍卖一般NP-难问题，解不了，所以是计算机问题
  -- IR 所有人的满意度上升
  -- 报价要报真实价格
  -- 常用定价机制是VGG

磁盘与硬盘区别：

  . 磁盘：计算机主要的存储介质，可以存储大量的二进制数据，并且断电后也能保持数据不丢失。 
  . 硬盘：是计算机最主要的存储设备。由一个或者多个铝制或者玻璃制的碟片组成。
  
数字签名

  - 过程：发送方将消息HASH后用私钥加密和消息本身发送出去，接收方用公钥解密消息后，再将消息本身进行Hash，比较两者不同从而确定是发送者发送的且未被篡改。
  - 发送方用私钥加密，接收方用公钥解密；和常用的反过来
  - 但还是有缺陷，用数字证书来保证安全传送发送者的公钥

数字证书：用于证明公开密钥拥有者的身份；由公钥基础设施（PKI）控制管理；通过信任链保证

云计算定义  
  - 通过互联网提供动态，易扩展，且通常为虚拟化的资源
  - 提供的资源可以是：网络，服务器，存储，应用软件，服务
  - 资源可配置，快速提供，管理方便

云计算分类（根据服务对象） 
  - 公有云：面向公众
  - 私有云：企业内部使用 

云计算的组成：自下而上

  - 基础设施（IaaS, Infrastructure as a Service）
    -- 将硬件资源虚拟化，对外提供动态，灵活的服务
  - 存储
    -- 类似于数据库服务
  - 平台（PaaS）
    -- 直接提供计算平台和解决方案，以方便应用程序部署，减少了购买和维护硬件和软件的成本
    -- 比如谷歌应用程序引擎
  - 应用
  - 服务
  - 客户端
    -- 专门提供云服务的计算机硬件和软件终端

云计算依赖的技术 
  - 分布式海量数据存储 
    -- 传统的关系型数据库并不是为了海量数据设计的，其扩容成本高昂；数据库并发访问数太多导致IO瓶颈和计算负担太重
    -- JDBC访问效率低，这是因为JAVA的对象机制，读取的数据都要序列化
    -- 解决方案：
      --- 对于企业，用大数据技术；云计算中广泛使用的数据存储系统是HDFS
      --- 对于用户，用对象存储技术；比如云盘就是这样实现的

  - 虚拟化技术的好处：
    -- 资源分享：用户各自的环境被虚拟机封装，共享数据资源
    -- 资源定制：利用虚拟化技术指定所需的CPU数目，内存容量，磁盘空间；实现按需分配
    -- 细粒度资源管理：可以将物理机拆分为若干虚拟机，提高资源利用率，且有助于服务器的负载均衡和节能

  - 云平台技术

   -- 目标：管理数目众多的服务器，使得它们能协同工作

  - 并行编程技术：目前有两种最重要的并行编程模型：数据并行和消息传递

    -- 数据并行模型：用户指定执行什么样的并行操作和并行的对象就行。适用于数组相加等看得出并行关系的任务。
    -- 消息传递：各个并行的部分之间通过消息传递来交换信息；灵活性高，更复杂，大部分并行程序使用
    -- 云计算中，并发处理，容错，负载均衡等细节都被抽象，通过统一的接口，用户的大型计算任务被自动并发和分布执行

  - 数据管理技术

    -- BigTable技术，建立一个大的分布式的数据库，实际上就是一个大的表，规模可超过1PB

云交付：主要有三种：SaaS,PaaS,IaaS，软件，平台，基础设施

  - SaaS：通过网络提供软件服务；用户不必购买软件，用户只需要接入互联网就可以随时随地访问这个SaaS服务。除此之外优点：较低前期成本，便于维护，快速使用，由服务提供商进行软件的维护。

  - PaaS：将软件研发的平台作为服务，以SaaS的模式提交给用户。PaaS也是SaaS模式的应用，但是PaaS加快了SaaS的开发速度。优点：开发，部署，维护简单
    -- IaaS+：服务平台交付，用户申请平台时，可以直接生成对应的实例而不需要做相关配置。
    -- Serverless：无服务器架构，用户不需要了解底层的配置和部署，直接编写运行在云上的函数，功能，服务。真正的按需使用：当请求到来时才开始运行；按运行时间和内存收费。

  - Caas：容器即服务。用容器作为资源分割和调度的单位。Docker几乎可以在任何平台上运行——物理机，虚拟机，公有云，私有云，个人计算机。
   -- 它解决了IaaS的问题：IaaS只提供机器和系统，没有需要自己把控资源的管理、分配，没有减少成本。
   -- 它解决了PaaS的问题：PaaS侧重于主流平台，没有统一的服务接口，不能满足个性化的需求。

  - IaaS：将硬件外包到其他地方。
 
~~~
{比较：}{}
  | 云交付模型 | 服务对象                 | 使用方式                         | 

  | IaaS       | 要使用硬件资源的用户     | 用户上传数据，程序代码，环境配置 |

  | PaaS       | 程序开发者               | 用户上传数据，程序代码           |

  | SaaS       | 企业和需要软件应用的用户 | 用户上传数据                     |
~~~
  

- 虚拟化技术 
  -- 分类：服务器虚拟化（VMware），桌面虚拟化，应用虚拟化（思杰）

- mapreduce

- 工具

  - ZooKeeper

- 分布式存储

- 分布式 
  -- P2P：用户下载的文件不是集中存在某个中心，而是分别存在网络上的不同节点，下载时将不同节点的碎片资源组合回来。
  -- 节点之间需要相互通讯，依赖的主要技术有：RPC，Q消息队列，Webservice
  -- 微服务架构主要用的是RPC，Webservice；分为微服务提供商（提供微服务），微服务请求者，微服务注册中心（将合适的提供商和请求者配对）；屏蔽了不同开发平台的功能模块之间相互调用的障碍

- AIops：清华大学裴丹老师，自动化检测

- 异常检测：看门狗系统：监视；如何避免物理机单点失效？零宕机架构——每运行一段时间进行快照，存在共享存储上，找另一台机器运行。

- 虚拟机：全虚拟化，半虚拟化，硬件仿真——都有损耗——5~15%，因此希望裸机；好处。没有损耗，弄一个更大的虚拟机等。

- 负载均衡：静态和动态

- 删除冗余重复文件：同用户之间，不同用户之间（微博转发图片等），
  -- 对于类似的照片（99%的照片类似）
  -- 去重——国内华中科技大学
  
- 存储扩展一般是垂直的（直接将数据从低容量的磁盘到大容量磁盘），因为水平扩展用户资料不好查；

- ipconfig可以做带宽限制

- 虚拟机的负载均衡，

- 网络：DPDK来处理大带宽时的数据包的转发 

